---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Fetch all posts from the 'blog' collection
const allPosts = await getCollection('blog');

// Sort posts by date to ensure a consistent default order
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

// SEO configuration for the page
const seo = {
  title: "Front Line Facts â€“ Straight Talk on VA Claims",
  description: "No-nonsense insights, updates, and tactical guides on winning your VA disability claims. For veterans, by someone who gets it.",
  image: "/assets/blog-cover.jpg",
  canonicalURL: "https://veteransdisabilitynetwork.org/blog"
}
---
<BaseLayout seo={seo}>
  <section class="hero" style={`background-image: url(${seo.image})`}>
    <div class="hero-content">
      <h1 class="hero-title">Front Line Facts</h1>
      <p class="hero-subtitle">Straight talk on VA disability claims. No fluff, no politics. Just the truth.</p>
    </div>
  </section>

  <main class="blog-grid-container">
    <!-- NEW: Search and Sort Controls -->
    <div class="controls-container">
      <div class="search-wrapper">
        <input type="search" id="search-input" placeholder="Search articles..." class="search-input" />
        <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
      </div>
      <div class="sort-wrapper">
        <label for="sort-select" class="sort-label">Sort by:</label>
        <select id="sort-select" class="sort-select">
          <option value="newest">Newest First</option>
          <option value="oldest">Oldest First</option>
          <option value="title-asc">Title (A-Z)</option>
          <option value="title-desc">Title (Z-A)</option>
        </select>
      </div>
    </div>

    <!-- The post grid will be populated by the client-side script -->
    <div id="post-grid" class="post-grid">
      <!-- Posts will be dynamically inserted here -->
    </div>

    <!-- NEW: Pagination Controls -->
    <nav id="pagination-container" class="pagination-container" aria-label="Blog post navigation">
      <!-- Pagination buttons will be dynamically inserted here -->
    </nav>
    
    <div id="no-results-message" class="no-results-message hidden">
        <h3>No articles found</h3>
        <p>Try adjusting your search or sorting criteria.</p>
    </div>

  </main>
</BaseLayout>

<!-- This template is used by the script to create post cards -->
<template id="post-card-template">
  <a href="#" class="post-card-link">
    <article class="post-card">
      <img src="#" alt="" class="post-card-image" width="400" height="225" loading="lazy" />
      <div class="post-card-content">
        <h2 class="post-card-title"></h2>
        <p class="post-card-excerpt"></p>
        <footer class="post-card-footer">
          <time datetime=""></time>
          <div class="read-more">Read More <span class="arrow">&rarr;</span></div>
        </footer>
      </div>
    </article>
  </a>
</template>

<style>
  /* --- Hero Section (No Changes) --- */
  .hero {
    position: relative;
    padding: 6rem 1.5rem;
    color: white;
    text-align: center;
    background-size: cover;
    background-position: center;
    background-color: var(--color-primary, #222);
  }
  .hero::before {
    content: '';
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.4));
    z-index: 1;
  }
  .hero-content {
    position: relative;
    z-index: 2;
    max-width: 60ch;
    margin-inline: auto;
  }
  .hero-title {
    font-size: clamp(2.5rem, 8vw, 4.5rem);
    font-weight: 900;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.7);
  }
  .hero-subtitle {
    font-size: clamp(1.125rem, 4vw, 1.5rem);
    font-weight: 400;
    opacity: 0.9;
    margin-top: 1rem;
  }

  /* --- NEW: Controls Container --- */
  .controls-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    gap: 1.5rem;
    margin-bottom: 3rem;
  }
  .search-wrapper {
    position: relative;
    flex-grow: 1;
    max-width: 400px;
  }
  .search-input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.75rem;
    font-size: 1rem;
    border: 1px solid var(--color-border, #ccc);
    border-radius: 8px;
    transition: border-color 0.2s, box-shadow 0.2s;
  }
  .search-input:focus {
    outline: none;
    border-color: var(--color-accent, #005A9C);
    box-shadow: 0 0 0 3px rgba(0, 90, 156, 0.2);
  }
  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-muted, #777);
  }
  .sort-wrapper {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  .sort-label {
    font-size: 1rem;
    font-weight: 500;
    color: var(--color-muted, #555);
  }
  .sort-select {
    padding: 0.75rem 1rem;
    font-size: 1rem;
    border: 1px solid var(--color-border, #ccc);
    border-radius: 8px;
    background-color: white;
  }

  /* --- Blog Grid --- */
  .blog-grid-container {
    max-width: 80rem;
    margin-inline: auto;
    padding: 4rem 1.5rem;
  }
  .post-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2.5rem;
    transition: opacity 0.4s ease-in-out;
  }
  .post-grid.fade-out {
    opacity: 0;
  }

  /* --- Post Card Design (No Changes) --- */
  .post-card {
    background: var(--color-surface, white);
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 100%;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .post-card-link {
    text-decoration: none;
    color: inherit;
    display: block;
    height: 100%;
  }
  .post-card-link:hover .post-card {
    transform: translateY(-8px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.12);
  }
  .post-card-image {
    width: 100%;
    aspect-ratio: 16 / 9;
    object-fit: cover;
    border-bottom: 1px solid var(--color-border, #eee);
  }
  .post-card-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }
  .post-card-title {
    font-size: 1.375rem;
    font-weight: 700;
    margin: 0 0 0.75rem 0;
    color: var(--color-primary, #111);
  }
  .post-card-excerpt {
    font-size: 1rem;
    color: var(--color-muted, #555);
    line-height: 1.6;
    margin: 0;
    flex-grow: 1;
  }
  .post-card-footer {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid var(--color-border, #eee);
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }
  time {
    font-size: 0.875rem;
    color: var(--color-muted, #777);
    font-weight: 500;
  }
  .read-more {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-accent, #005A9C);
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    transition: gap 0.2s ease;
  }
  .arrow {
    transition: transform 0.2s ease;
  }
  .post-card-link:hover .read-more {
    gap: 0.5rem;
    text-decoration: underline;
  }
  .post-card-link:hover .arrow {
    transform: translateX(4px);
  }

  /* --- NEW: Pagination Styles --- */
  .pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    margin-top: 3rem;
  }
  .pagination-button {
    border: 1px solid var(--color-border, #ccc);
    background-color: white;
    color: var(--color-primary, #333);
    border-radius: 6px;
    padding: 0.5rem 1rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
  }
  .pagination-button:hover:not([disabled]) {
    background-color: #f0f0f0;
  }
  .pagination-button.active {
    background-color: var(--color-accent, #005A9C);
    color: white;
    border-color: var(--color-accent, #005A9C);
  }
  .pagination-button[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }
  .pagination-ellipsis {
    padding: 0.5rem 0.25rem;
  }
  .pagination-button.active {
    background-color: var(--color-accent, #005A9C);
    color: white;
    border-color: var(--color-accent, #005A9C);
    font-weight: 700;
    cursor: default;
  }
  .pagination-button[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }
  .pagination-ellipsis {
    padding: 0.5rem 0.25rem;
  }
  
  /* --- NEW: No Results Message --- */
  .no-results-message {
    text-align: center;
    padding: 3rem 1rem;
    border: 2px dashed var(--color-border, #ddd);
    border-radius: 12px;
    margin-top: 2rem;
  }
  .no-results-message.hidden {
      display: none;
  }
  .no-results-message h3 {
      font-size: 1.5rem;
      color: var(--color-primary, #333);
      margin-bottom: 0.5rem;
  }
  .no-results-message p {
      color: var(--color-muted, #777);
  }


  /* --- Responsive Grid Breakpoints --- */
  @media (min-width: 640px) {
    .post-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (min-width: 1024px) {
    .post-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
</style>

<script define:vars={{ allPosts: sortedPosts }}>
  document.addEventListener('DOMContentLoaded', () => {
    // --- STATE MANAGEMENT ---
    let currentPage = 1;
    let postsPerPage = 6;
    let searchTerm = '';
    let sortOrder = 'newest';
    let postsData = allPosts; // Use the data passed from Astro

    // --- DOM ELEMENTS ---
    const postGrid = document.getElementById('post-grid');
    const paginationContainer = document.getElementById('pagination-container');
    const searchInput = document.getElementById('search-input');
    const sortSelect = document.getElementById('sort-select');
    const cardTemplate = document.getElementById('post-card-template');
    const noResultsMessage = document.getElementById('no-results-message');

    // --- MAIN RENDER FUNCTION ---
    function render() {
      // 1. Filter posts based on search term
      let filteredPosts = postsData.filter(post => {
        const titleMatch = post.data.title.toLowerCase().includes(searchTerm.toLowerCase());
        const descriptionMatch = post.data.description.toLowerCase().includes(searchTerm.toLowerCase());
        return titleMatch || descriptionMatch;
      });

      // 2. Sort posts
      switch (sortOrder) {
        case 'oldest':
          filteredPosts.sort((a, b) => new Date(a.data.pubDate) - new Date(b.data.pubDate));
          break;
        case 'title-asc':
          filteredPosts.sort((a, b) => a.data.title.localeCompare(b.data.title));
          break;
        case 'title-desc':
          filteredPosts.sort((a, b) => b.data.title.localeCompare(a.data.title));
          break;
        case 'newest':
        default:
          filteredPosts.sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate));
          break;
      }

      // 3. Paginate posts
      const totalPosts = filteredPosts.length;
      const totalPages = Math.ceil(totalPosts / postsPerPage);
      if (currentPage > totalPages) currentPage = 1;

      const startIndex = (currentPage - 1) * postsPerPage;
      const endIndex = startIndex + postsPerPage;
      const postsToShow = filteredPosts.slice(startIndex, endIndex);

      // 4. Render to DOM with animation
      postGrid.classList.add('fade-out');
      
      setTimeout(() => {
        postGrid.innerHTML = ''; // Clear existing posts
        
        if(postsToShow.length === 0) {
            noResultsMessage.classList.remove('hidden');
            paginationContainer.classList.add('hidden');
        } else {
            noResultsMessage.classList.add('hidden');
            paginationContainer.classList.remove('hidden');
        }

        postsToShow.forEach(post => {
          const card = cardTemplate.content.cloneNode(true);
          const link = card.querySelector('.post-card-link');
          const image = card.querySelector('.post-card-image');
          const title = card.querySelector('.post-card-title');
          const excerpt = card.querySelector('.post-card-excerpt');
          const time = card.querySelector('time');

          link.href = `/blog/${post.slug}`;
          image.src = post.data.coverImage;
          image.alt = post.data.coverAlt;
          title.textContent = post.data.title;
          excerpt.textContent = post.data.description;
          
          const pubDate = new Date(post.data.pubDate);
          time.setAttribute('datetime', pubDate.toISOString());
          time.textContent = pubDate.toLocaleDateString('en-US', {
            year: 'numeric', month: 'long', day: 'numeric'
          });

          postGrid.appendChild(card);
        });

        renderPagination(totalPages);
        postGrid.classList.remove('fade-out');
      }, 200); // Match timeout with CSS transition duration
    }

    // --- PAGINATION RENDER FUNCTION ---
    function renderPagination(totalPages) {
      paginationContainer.innerHTML = '';
      if (totalPages <= 1) return;

      // Previous Button
      const prevButton = document.createElement('button');
      prevButton.textContent = 'â€¹ Prev';
      prevButton.classList.add('pagination-button');
      prevButton.disabled = currentPage === 1;
      prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          render();
        }
      });
      paginationContainer.appendChild(prevButton);
      
      // Page Number Buttons
      for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.textContent = i;
        pageButton.classList.add('pagination-button');
        if (i === currentPage) {
          pageButton.classList.add('active');
        }
        pageButton.addEventListener('click', () => {
          currentPage = i;
          render();
        });
        paginationContainer.appendChild(pageButton);
      }

      // Next Button
      const nextButton = document.createElement('button');
      nextButton.textContent = 'Next â€º';
      nextButton.classList.add('pagination-button');
      nextButton.disabled = currentPage === totalPages;
      nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          render();
        }
      });
      paginationContainer.appendChild(nextButton);
    }

    // --- EVENT LISTENERS ---
    searchInput.addEventListener('input', (e) => {
      searchTerm = e.target.value;
      currentPage = 1; // Reset to first page on new search
      render();
    });

    sortSelect.addEventListener('change', (e) => {
      sortOrder = e.target.value;
      currentPage = 1; // Reset to first page on new sort
      render();
    });

    // --- INITIAL RENDER ---
    render();
  });
</script>
