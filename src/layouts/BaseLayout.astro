---
import PrivacyPolicyModal from '../components/PrivacyPolicyModal.astro';
import TermsConditionsModal from '../components/TermsConditionsModal.astro';
import ReleaseOfInformationModal from '../components/ReleaseOfInformationModal.astro';

const { title = 'VA Disability Claims Help | Veterans Disability Network', description = 'Expert guidance for VA disability claims. Navigate the process, fight unjust denials, and secure maximum benefits. Free consultation available.' } = Astro.props;
---
<html lang="en" data-theme="light">
  <head>
    <meta charset="utf-8" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:wght@400;700&family=Merriweather:wght@400;700&display=swap"
    rel="stylesheet"
  >
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="icon" type="image/svg+xml" href="/icon.png" />
		<meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="stylesheet" href="/styles/theme.css" />
    {import.meta.env.MODE === 'production' && (
    <>
      <!-- Google tag (gtag.js) -->
      <script async src="https://www.googletagmanager.com/gtag/js?id=G-GC3EFSX2HB"></script>
      <script is:inline>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'G-GC3EFSX2HB');
      </script>
    </>
  )}
  </head>
  <body>
    <slot />
    <PrivacyPolicyModal />
        <TermsConditionsModal />
        <ReleaseOfInformationModal />
    <script is:inline>
            document.addEventListener('DOMContentLoaded', () => {
                // This function opens a modal by its ID
                function openModal(modalId) {
                    const modal = document.getElementById(modalId);
                    if (modal) {
                        modal.classList.add('is-open');
                        document.body.style.overflow = 'hidden'; // Prevent background scrolling
                    }
                }

                // This function closes any open modal
                function closeModal(modal) {
                    modal.classList.remove('is-open');
                    document.body.style.overflow = ''; // Restore scrolling
                }

                // Use event delegation to listen for clicks on any modal trigger
                document.body.addEventListener('click', (event) => {
                    const trigger = event.target.closest('[data-modal-trigger]');
                    if (trigger) {
                        event.preventDefault();
                        const modalId = trigger.dataset.modalTrigger;
                        openModal(modalId);
                    }
                });

                // Add listeners to all modals for closing
                const modals = document.querySelectorAll('.modal');
                modals.forEach(modal => {
                    modal.addEventListener('click', (event) => {
                        // Close if the overlay or a close button is clicked
                        if (event.target.classList.contains('modal-overlay') || event.target.closest('.modal-close-btn')) {
                            closeModal(modal);
                        }
                    });
                });

                // Add keyboard support to close modals with the Escape key
                document.addEventListener('keydown', (event) => {
                    if (event.key === 'Escape') {
                        document.querySelectorAll('.modal.is-open').forEach(closeModal);
                    }
                });
            });
        </script>
  </body>
</html>


